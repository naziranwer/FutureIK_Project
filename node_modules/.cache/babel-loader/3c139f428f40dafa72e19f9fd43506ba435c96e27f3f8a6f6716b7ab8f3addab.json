{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\futureik\\\\src\\\\components\\\\NestedFoldersComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Folder from \"./FolderComponent\"; // Import the Folder component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NestedFolders = ({\n  mainFolders\n}) => {\n  _s();\n  const [folders, setFolders] = useState(mainFolders);\n\n  // Update the folder or file isChecked state and propagate changes recursively\n  const handleCheckboxChange = (item, isChecked) => {\n    item.isChecked = isChecked;\n    setFolders([...folders]); // Trigger a re-render\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: folders.map((mainFolder, index) => /*#__PURE__*/_jsxDEV(Folder, {\n      folder: mainFolder,\n      onCheckboxChange: handleCheckboxChange\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(NestedFolders, \"Va0PFtLCNqpSfeEsE/3GHh3S2Yw=\");\n_c = NestedFolders;\nexport default NestedFolders;\nvar _c;\n$RefreshReg$(_c, \"NestedFolders\");","map":{"version":3,"names":["React","useState","Folder","jsxDEV","_jsxDEV","NestedFolders","mainFolders","_s","folders","setFolders","handleCheckboxChange","item","isChecked","children","map","mainFolder","index","folder","onCheckboxChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/futureik/src/components/NestedFoldersComponent.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Folder from \"./FolderComponent\"; // Import the Folder component\r\n\r\nconst NestedFolders = ({ mainFolders }) => {\r\n  const [folders, setFolders] = useState(mainFolders);\r\n\r\n  // Update the folder or file isChecked state and propagate changes recursively\r\n  const handleCheckboxChange = (item, isChecked) => {\r\n    item.isChecked = isChecked;\r\n    setFolders([...folders]); // Trigger a re-render\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {folders.map((mainFolder, index) => (\r\n        <Folder key={index} folder={mainFolder} onCheckboxChange={handleCheckboxChange} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NestedFolders;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAACK,WAAW,CAAC;;EAEnD;EACA,MAAMI,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;IAChDD,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1BH,UAAU,CAAC,CAAC,GAAGD,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED,oBACEJ,OAAA;IAAAS,QAAA,EACGL,OAAO,CAACM,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBAC7BZ,OAAA,CAACF,MAAM;MAAae,MAAM,EAAEF,UAAW;MAACG,gBAAgB,EAAER;IAAqB,GAAlEM,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA+D,CAClF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACf,EAAA,CAhBIF,aAAa;AAAAkB,EAAA,GAAblB,aAAa;AAkBnB,eAAeA,aAAa;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}