{"ast":null,"code":"import _slicedToArray from\"C:/Users/Admin/futureik/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// // MainFolder.js\n// import React, { useState } from \"react\";\n// import Subfolder from \"./subFolder\";\n// import \"../App.css\";\n// const MainFolder = ({ mainFolder }) => {\n//   const [isChecked, setIsChecked] = useState(false);\n//   const [activeMain, setActiveMain] = useState(null);\n//   const [showSubFolder, setShowSubFolder] = useState(false);\n//   const toggleCheckbox = () => {\n//     setIsChecked(!isChecked);\n//   };\n//   const handleShowSubFolder = () => {\n//     setActiveMain(mainFolder);\n//     setShowSubFolder(!showSubFolder);\n//   };\n//   return (\n//     <div>\n//       <label>\n//         <input\n//           type=\"checkbox\"\n//           checked={isChecked}\n//           onChange={toggleCheckbox}\n//         />\n//         <h3 style={{ color: \"green\" }} onClick={handleShowSubFolder}>\n//           <span className=\"mr-2\">\n//             <i className=\"fas fa-folder-open text-blue-800\"></i>\n//           </span>\n//           {mainFolder.name}\n//         </h3>\n//       </label>\n//       {showSubFolder &&\n//         mainFolder?.subfolders?.map((subfolder, index) => (\n//           <div key={index} style={{ marginLeft: \"30px\" }}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={isChecked}\n//                 onChange={toggleCheckbox}\n//               />\n//               <Subfolder subfolder={subfolder} isChecked={isChecked} />\n//             </label>\n//           </div>\n//         ))}\n//     </div>\n//   );\n// };\n// export default MainFolder;\n// MainFolder.js\n// MainFolder.js\nimport React,{useState,useEffect}from\"react\";import Subfolder from\"./subFolder\";import\"../App.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MainFolder=function MainFolder(_ref){var mainFolder=_ref.mainFolder;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isChecked=_useState2[0],setIsChecked=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),activeMain=_useState4[0],setActiveMain=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showSubFolder=_useState6[0],setShowSubFolder=_useState6[1];var subfolders=(mainFolder===null||mainFolder===void 0?void 0:mainFolder.subfolders)||[];useEffect(function(){// When all subfolder checkboxes are checked, set the main folder checkbox to checked\nvar allSubfoldersChecked=subfolders.every(function(subfolder){return subfolder.isChecked;});setIsChecked(allSubfoldersChecked);},[subfolders]);var toggleCheckbox=function toggleCheckbox(){// Toggle the main folder checkbox\nsetIsChecked(!isChecked);// Update the isChecked property for all subfolders\nsubfolders.forEach(function(subfolder){subfolder.isChecked=!isChecked;});};var handleSubfolderChange=function handleSubfolderChange(){// When a subfolder checkbox changes, update the main folder checkbox\nvar allSubfoldersChecked=subfolders.every(function(subfolder){return subfolder.isChecked;});setIsChecked(allSubfoldersChecked);};var handleShowSubFolder=function handleShowSubFolder(){setActiveMain(mainFolder);setShowSubFolder(!showSubFolder);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\"},children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:isChecked,onChange:toggleCheckbox}),/*#__PURE__*/_jsxs(\"h3\",{style:{color:\"green\",marginLeft:\"10px\"},onClick:handleShowSubFolder,children:[/*#__PURE__*/_jsx(\"span\",{className:\"mr-2\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-folder-open text-blue-800\"})}),mainFolder.name]})]}),showSubFolder&&subfolders.map(function(subfolder,index){return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\",marginLeft:\"30px\"},children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:subfolder.isChecked,onChange:function onChange(){subfolder.isChecked=!subfolder.isChecked;handleSubfolderChange();}}),/*#__PURE__*/_jsx(Subfolder,{subfolder:subfolder,isChecked:subfolder.isChecked})]},index);}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-green-600\",children:\"abcdef\"})]});};export default MainFolder;","map":{"version":3,"names":["React","useState","useEffect","Subfolder","jsx","_jsx","jsxs","_jsxs","MainFolder","_ref","mainFolder","_useState","_useState2","_slicedToArray","isChecked","setIsChecked","_useState3","_useState4","activeMain","setActiveMain","_useState5","_useState6","showSubFolder","setShowSubFolder","subfolders","allSubfoldersChecked","every","subfolder","toggleCheckbox","forEach","handleSubfolderChange","handleShowSubFolder","children","style","display","alignItems","type","checked","onChange","color","marginLeft","onClick","className","name","map","index"],"sources":["C:/Users/Admin/futureik/src/components/mainFolder.jsx"],"sourcesContent":["// // MainFolder.js\r\n// import React, { useState } from \"react\";\r\n// import Subfolder from \"./subFolder\";\r\n// import \"../App.css\";\r\n\r\n// const MainFolder = ({ mainFolder }) => {\r\n//   const [isChecked, setIsChecked] = useState(false);\r\n//   const [activeMain, setActiveMain] = useState(null);\r\n//   const [showSubFolder, setShowSubFolder] = useState(false);\r\n\r\n//   const toggleCheckbox = () => {\r\n//     setIsChecked(!isChecked);\r\n//   };\r\n\r\n//   const handleShowSubFolder = () => {\r\n//     setActiveMain(mainFolder);\r\n//     setShowSubFolder(!showSubFolder);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <label>\r\n//         <input\r\n//           type=\"checkbox\"\r\n//           checked={isChecked}\r\n//           onChange={toggleCheckbox}\r\n//         />\r\n//         <h3 style={{ color: \"green\" }} onClick={handleShowSubFolder}>\r\n//           <span className=\"mr-2\">\r\n//             <i className=\"fas fa-folder-open text-blue-800\"></i>\r\n//           </span>\r\n//           {mainFolder.name}\r\n//         </h3>\r\n//       </label>\r\n//       {showSubFolder &&\r\n//         mainFolder?.subfolders?.map((subfolder, index) => (\r\n//           <div key={index} style={{ marginLeft: \"30px\" }}>\r\n//             <label>\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 checked={isChecked}\r\n//                 onChange={toggleCheckbox}\r\n//               />\r\n//               <Subfolder subfolder={subfolder} isChecked={isChecked} />\r\n//             </label>\r\n//           </div>\r\n//         ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MainFolder;\r\n\r\n\r\n// MainFolder.js\r\n// MainFolder.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Subfolder from \"./subFolder\";\r\nimport \"../App.css\";\r\n\r\nconst MainFolder = ({ mainFolder }) => {\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [activeMain, setActiveMain] = useState(null);\r\n  const [showSubFolder, setShowSubFolder] = useState(false);\r\n\r\n  const subfolders = mainFolder?.subfolders || [];\r\n\r\n  useEffect(() => {\r\n    // When all subfolder checkboxes are checked, set the main folder checkbox to checked\r\n    const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\r\n    setIsChecked(allSubfoldersChecked);\r\n  }, [subfolders]);\r\n\r\n  const toggleCheckbox = () => {\r\n    // Toggle the main folder checkbox\r\n    setIsChecked(!isChecked);\r\n    // Update the isChecked property for all subfolders\r\n    subfolders.forEach(subfolder => {\r\n      subfolder.isChecked = !isChecked;\r\n    });\r\n  };\r\n\r\n  const handleSubfolderChange = () => {\r\n    // When a subfolder checkbox changes, update the main folder checkbox\r\n    const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\r\n    setIsChecked(allSubfoldersChecked);\r\n  };\r\n\r\n  const handleShowSubFolder = () => {\r\n    setActiveMain(mainFolder);\r\n    setShowSubFolder(!showSubFolder);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isChecked}\r\n          onChange={toggleCheckbox}\r\n        />\r\n        <h3 style={{ color: \"green\", marginLeft: \"10px\" }} onClick={handleShowSubFolder}>\r\n          <span className=\"mr-2\">\r\n            <i className=\"fas fa-folder-open text-blue-800\"></i>\r\n          </span>\r\n          {mainFolder.name}\r\n        </h3>\r\n      </div>\r\n      {showSubFolder &&\r\n        subfolders.map((subfolder, index) => (\r\n          <div key={index} style={{ display: \"flex\", alignItems: \"center\", marginLeft: \"30px\" }}>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={subfolder.isChecked}\r\n              onChange={() => {\r\n                subfolder.isChecked = !subfolder.isChecked;\r\n                handleSubfolderChange();\r\n              }}\r\n            />\r\n            <Subfolder subfolder={subfolder} isChecked={subfolder.isChecked} />\r\n          </div>\r\n        ))}\r\n        <div className=\"bg-green-600\">abcdef</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainFolder;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}