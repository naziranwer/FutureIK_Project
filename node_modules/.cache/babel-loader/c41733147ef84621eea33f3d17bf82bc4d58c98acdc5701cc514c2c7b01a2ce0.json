{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\futureik\\\\src\\\\components\\\\mainFolder.jsx\",\n  _s = $RefreshSig$();\n// // // MainFolder.js\n// // import React, { useState } from \"react\";\n// // import Subfolder from \"./subFolder\";\n// // import \"../App.css\";\n\n// // const MainFolder = ({ mainFolder }) => {\n// //   const [isChecked, setIsChecked] = useState(false);\n// //   const [activeMain, setActiveMain] = useState(null);\n// //   const [showSubFolder, setShowSubFolder] = useState(false);\n\n// //   const toggleCheckbox = () => {\n// //     setIsChecked(!isChecked);\n// //   };\n\n// //   const handleShowSubFolder = () => {\n// //     setActiveMain(mainFolder);\n// //     setShowSubFolder(!showSubFolder);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <label>\n// //         <input\n// //           type=\"checkbox\"\n// //           checked={isChecked}\n// //           onChange={toggleCheckbox}\n// //         />\n// //         <h3 style={{ color: \"green\" }} onClick={handleShowSubFolder}>\n// //           <span className=\"mr-2\">\n// //             <i className=\"fas fa-folder-open text-blue-800\"></i>\n// //           </span>\n// //           {mainFolder.name}\n// //         </h3>\n// //       </label>\n// //       {showSubFolder &&\n// //         mainFolder?.subfolders?.map((subfolder, index) => (\n// //           <div key={index} style={{ marginLeft: \"30px\" }}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 checked={isChecked}\n// //                 onChange={toggleCheckbox}\n// //               />\n// //               <Subfolder subfolder={subfolder} isChecked={isChecked} />\n// //             </label>\n// //           </div>\n// //         ))}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainFolder;\n\n// // MainFolder.js\n// // MainFolder.js\n// import React, { useState, useEffect } from \"react\";\n// import Subfolder from \"./subFolder\";\n// // import \"../App.css\";\n\n// const MainFolder = ({ mainFolder }) => {\n//   const [isChecked, setIsChecked] = useState(false);\n//   const [activeMain, setActiveMain] = useState(null);\n//   const [showSubFolder, setShowSubFolder] = useState(false);\n\n//   const subfolders = mainFolder?.subfolders || [];\n\n//   useEffect(() => {\n//     // When all subfolder checkboxes are checked, set the main folder checkbox to checked\n//     const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\n//     setIsChecked(allSubfoldersChecked);\n//   }, [subfolders]);\n\n//   console.log(\"isChecked status\",isChecked);\n//   const toggleCheckbox = () => {\n//     // Toggle the main folder checkbox\n//     setIsChecked(!isChecked);\n//     // Update the isChecked property for all subfolders\n//     // subfolders.forEach(subfolder => {\n//     //   subfolder.isChecked = !isChecked;\n//     // });\n//   };\n\n//   const handleSubfolderChange = () => {\n//     // When a subfolder checkbox changes, update the main folder checkbox\n//     const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\n//     setIsChecked(allSubfoldersChecked);\n//   };\n\n//   const handleShowSubFolder = () => {\n//     setActiveMain(mainFolder);\n//     setShowSubFolder(!showSubFolder);\n//   };\n\n//   return (\n//     <div >\n//       <div style={{ display: \"flex\", alignItems: \"center\" }}>\n//         <input\n//           type=\"checkbox\"\n//           checked={isChecked}\n//           onChange={toggleCheckbox}\n//         />\n//         <h3 style={{ color: \"green\", marginLeft: \"10px\" }} onClick={handleShowSubFolder}>\n//           <span className=\"mr-2\">\n//             <i className=\"fas fa-folder-open text-blue-800\"></i>\n//           </span>\n//           {mainFolder.name}\n//         </h3>\n//       </div>\n//       {showSubFolder &&\n//         subfolders.map((subfolder, index) => (\n//           <div key={index} style={{ display: \"flex\", alignItems: \"center\", marginLeft: \"30px\" }}>\n//             <input\n//             className=\"bg-red-800\"\n//               type=\"checkbox\"\n//               checked={subfolder.isChecked}\n//               onChange={() => {\n//                 // subfolder.isChecked = !subfolder.isChecked;\n//                 handleSubfolderChange();\n//               }}\n//             />\n//             <Subfolder subfolder={subfolder} isChecked={subfolder.isChecked} />\n//           </div>\n//         ))}\n//     </div>\n//   );\n// };\n\n// export default MainFolder;\n\nimport React, { useState, useEffect } from \"react\";\nimport Subfolder from \"./subFolder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainFolder = ({\n  mainFolder\n}) => {\n  _s();\n  const [showSubFolder, setShowSubFolder] = useState(false);\n  const [subfoldersChecked, setSubfoldersChecked] = useState(false);\n  const subfolders = (mainFolder === null || mainFolder === void 0 ? void 0 : mainFolder.subfolders) || [];\n  useEffect(() => {\n    const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\n    setSubfoldersChecked(allSubfoldersChecked);\n  }, [subfolders]);\n  const toggleSubfolders = () => {\n    setSubfoldersChecked(!subfoldersChecked);\n    subfolders.forEach(subfolder => {\n      subfolder.isChecked = !subfoldersChecked;\n    });\n  };\n  const handleSubfolderChange = () => {\n    const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\n    setSubfoldersChecked(allSubfoldersChecked);\n  };\n  const handleShowSubFolder = () => {\n    setShowSubFolder(!showSubFolder);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/image/folder_i.jpg\",\n        width: 100,\n        height: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: subfoldersChecked,\n        onChange: toggleSubfolders\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: \"green\",\n          marginLeft: \"10px\"\n        },\n        onClick: handleShowSubFolder,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mr-2\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-folder-open text-blue-800\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), mainFolder.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), showSubFolder && subfolders.map((subfolder, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        marginLeft: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"bg-red-800\",\n        type: \"checkbox\",\n        checked: subfolder.isChecked,\n        onChange: () => {\n          subfolder.isChecked = !subfolder.isChecked;\n          handleSubfolderChange();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Subfolder, {\n        subfolder: subfolder,\n        isChecked: subfolder.isChecked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(MainFolder, \"uML5U+blz0+SN1wdDEJDsiEUv0g=\");\n_c = MainFolder;\nexport default MainFolder;\nvar _c;\n$RefreshReg$(_c, \"MainFolder\");","map":{"version":3,"names":["React","useState","useEffect","Subfolder","jsxDEV","_jsxDEV","MainFolder","mainFolder","_s","showSubFolder","setShowSubFolder","subfoldersChecked","setSubfoldersChecked","subfolders","allSubfoldersChecked","every","subfolder","isChecked","toggleSubfolders","forEach","handleSubfolderChange","handleShowSubFolder","children","style","display","alignItems","src","width","height","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","color","marginLeft","onClick","className","name","map","index","_c","$RefreshReg$"],"sources":["C:/Users/Admin/futureik/src/components/mainFolder.jsx"],"sourcesContent":["// // // MainFolder.js\r\n// // import React, { useState } from \"react\";\r\n// // import Subfolder from \"./subFolder\";\r\n// // import \"../App.css\";\r\n\r\n// // const MainFolder = ({ mainFolder }) => {\r\n// //   const [isChecked, setIsChecked] = useState(false);\r\n// //   const [activeMain, setActiveMain] = useState(null);\r\n// //   const [showSubFolder, setShowSubFolder] = useState(false);\r\n\r\n// //   const toggleCheckbox = () => {\r\n// //     setIsChecked(!isChecked);\r\n// //   };\r\n\r\n// //   const handleShowSubFolder = () => {\r\n// //     setActiveMain(mainFolder);\r\n// //     setShowSubFolder(!showSubFolder);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <label>\r\n// //         <input\r\n// //           type=\"checkbox\"\r\n// //           checked={isChecked}\r\n// //           onChange={toggleCheckbox}\r\n// //         />\r\n// //         <h3 style={{ color: \"green\" }} onClick={handleShowSubFolder}>\r\n// //           <span className=\"mr-2\">\r\n// //             <i className=\"fas fa-folder-open text-blue-800\"></i>\r\n// //           </span>\r\n// //           {mainFolder.name}\r\n// //         </h3>\r\n// //       </label>\r\n// //       {showSubFolder &&\r\n// //         mainFolder?.subfolders?.map((subfolder, index) => (\r\n// //           <div key={index} style={{ marginLeft: \"30px\" }}>\r\n// //             <label>\r\n// //               <input\r\n// //                 type=\"checkbox\"\r\n// //                 checked={isChecked}\r\n// //                 onChange={toggleCheckbox}\r\n// //               />\r\n// //               <Subfolder subfolder={subfolder} isChecked={isChecked} />\r\n// //             </label>\r\n// //           </div>\r\n// //         ))}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MainFolder;\r\n\r\n\r\n// // MainFolder.js\r\n// // MainFolder.js\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Subfolder from \"./subFolder\";\r\n// // import \"../App.css\";\r\n\r\n\r\n// const MainFolder = ({ mainFolder }) => {\r\n//   const [isChecked, setIsChecked] = useState(false);\r\n//   const [activeMain, setActiveMain] = useState(null);\r\n//   const [showSubFolder, setShowSubFolder] = useState(false);\r\n\r\n//   const subfolders = mainFolder?.subfolders || [];\r\n\r\n//   useEffect(() => {\r\n//     // When all subfolder checkboxes are checked, set the main folder checkbox to checked\r\n//     const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\r\n//     setIsChecked(allSubfoldersChecked);\r\n//   }, [subfolders]);\r\n  \r\n//   console.log(\"isChecked status\",isChecked);\r\n//   const toggleCheckbox = () => {\r\n//     // Toggle the main folder checkbox\r\n//     setIsChecked(!isChecked);\r\n//     // Update the isChecked property for all subfolders\r\n//     // subfolders.forEach(subfolder => {\r\n//     //   subfolder.isChecked = !isChecked;\r\n//     // });\r\n//   };\r\n\r\n//   const handleSubfolderChange = () => {\r\n//     // When a subfolder checkbox changes, update the main folder checkbox\r\n//     const allSubfoldersChecked = subfolders.every(subfolder => subfolder.isChecked);\r\n//     setIsChecked(allSubfoldersChecked);\r\n//   };\r\n\r\n//   const handleShowSubFolder = () => {\r\n//     setActiveMain(mainFolder);\r\n//     setShowSubFolder(!showSubFolder);\r\n//   };\r\n\r\n//   return (\r\n//     <div >\r\n//       <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//         <input\r\n//           type=\"checkbox\"\r\n//           checked={isChecked}\r\n//           onChange={toggleCheckbox}\r\n//         />\r\n//         <h3 style={{ color: \"green\", marginLeft: \"10px\" }} onClick={handleShowSubFolder}>\r\n//           <span className=\"mr-2\">\r\n//             <i className=\"fas fa-folder-open text-blue-800\"></i>\r\n//           </span>\r\n//           {mainFolder.name}\r\n//         </h3>\r\n//       </div>\r\n//       {showSubFolder &&\r\n//         subfolders.map((subfolder, index) => (\r\n//           <div key={index} style={{ display: \"flex\", alignItems: \"center\", marginLeft: \"30px\" }}>\r\n//             <input\r\n//             className=\"bg-red-800\"\r\n//               type=\"checkbox\"\r\n//               checked={subfolder.isChecked}\r\n//               onChange={() => {\r\n//                 // subfolder.isChecked = !subfolder.isChecked;\r\n//                 handleSubfolderChange();\r\n//               }}\r\n//             />\r\n//             <Subfolder subfolder={subfolder} isChecked={subfolder.isChecked} />\r\n//           </div>\r\n//         ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MainFolder;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Subfolder from \"./subFolder\";\r\n\r\nconst MainFolder = ({ mainFolder }) => {\r\n  const [showSubFolder, setShowSubFolder] = useState(false);\r\n  const [subfoldersChecked, setSubfoldersChecked] = useState(false);\r\n\r\n  const subfolders = mainFolder?.subfolders || [];\r\n\r\n  useEffect(() => {\r\n    const allSubfoldersChecked = subfolders.every((subfolder) => subfolder.isChecked);\r\n    setSubfoldersChecked(allSubfoldersChecked);\r\n  }, [subfolders]);\r\n\r\n  const toggleSubfolders = () => {\r\n    setSubfoldersChecked(!subfoldersChecked);\r\n    subfolders.forEach((subfolder) => {\r\n      subfolder.isChecked = !subfoldersChecked;\r\n    });\r\n  };\r\n\r\n  const handleSubfolderChange = () => {\r\n    const allSubfoldersChecked = subfolders.every((subfolder) => subfolder.isChecked);\r\n    setSubfoldersChecked(allSubfoldersChecked);\r\n  };\r\n\r\n  const handleShowSubFolder = () => {\r\n    setShowSubFolder(!showSubFolder);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <img src=\"/image/folder_i.jpg\" width={100} height={100}/>\r\n        <input type=\"checkbox\" checked={subfoldersChecked} onChange={toggleSubfolders} />\r\n        <h3 style={{ color: \"green\", marginLeft: \"10px\" }} onClick={handleShowSubFolder}>\r\n          <span className=\"mr-2\">\r\n            <i className=\"fas fa-folder-open text-blue-800\"></i>\r\n          </span>\r\n          {mainFolder.name}\r\n        </h3>\r\n      </div>\r\n      {showSubFolder &&\r\n        subfolders.map((subfolder, index) => (\r\n          <div key={index} style={{ display: \"flex\", alignItems: \"center\", marginLeft: \"30px\" }}>\r\n            <input\r\n              className=\"bg-red-800\"\r\n              type=\"checkbox\"\r\n              checked={subfolder.isChecked}\r\n              onChange={() => {\r\n                subfolder.isChecked = !subfolder.isChecked;\r\n                handleSubfolderChange();\r\n              }}\r\n            />\r\n            <Subfolder subfolder={subfolder} isChecked={subfolder.isChecked} />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainFolder;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}